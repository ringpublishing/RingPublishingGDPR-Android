# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end


    desc "Deploy a new version to the Google Play"
    lane :update_version do
      version = gradle_properties(property_name: "gdpr_version_name")
    end

  lane :publish_open_source_sdk do |options|
    puts "publish_open_source_sdk - starting .."

    project_directory = ENV["DL_PROJECT_DIRECTORY_PATH"]
    project_file_name = ENV["DL_PROJECT_FILE_NAME"]

    version = gradle_properties(property_name: "gdpr_version_name")
    changelog_file_name = "./../Changelogs/#{version}"

    puts "Version name:" + version

       github_token = ENV["DL_GITHUB_PERSONAL_TOKEN"]

        # Check if release already exists
        release = get_github_release(url: ENV["DL_GITHUB_REPO_NAME"], version: "#{version}", api_token: github_token)

        if release == nil
          puts "GitHub release does not exist! Creating new one .."

          # Check existing tag
          version_tags = sh("cd .. && git tag -l #{version}")
          puts "Detected version: #{version}"
          puts "Existing tags for version: #{version_tags}"

          changes_to_append = (File.read(changelog_file_name) rescue "No changelog provided")

          puts "Changelog to append: " + changes_to_append

          #UNCOMENT if version_tags == nil || (version_tags.include? version)
            #UNCOMENT sh("cd .. && git tag -d #{version}")
            #UNCOMENT sh("cd .. && git push origin :refs/tags/#{version}")
          #UNCOMENT else
            # Bump version in module for next usage
             gradle(task: "bumpPatchVersion")

            # Commit changelog to main file
            changelog_content = IO.read './../CHANGELOG.md'
            IO.write './../CHANGELOG.md', "#{changes_to_append}\n" + changelog_content

            #UNCOMENT sh("cd .. && git add -A && git commit -m \'Changelog for Release #{version}\' && git push origin")

            #UNCOMENT end

            # Publish artifact to GitHub repository
            #UNCOMENT gradle(task: "clean build publish")

            # Create GitHub release
                  set_github_release(
                    repository_name: ENV["DL_GITHUB_REPO_NAME"],
                    api_token: github_token,
                    name: "#{version}",
                    tag_name: "#{version}",
                    description: changes_to_append,
                    commitish: "master"
                  )
        else
            puts "GitHub release exist! Exiting .."
        end

  end

end
